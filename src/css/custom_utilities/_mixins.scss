@use 'sass:map';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';
@use 'sass:meta';


@mixin generate_spacing_range(
  $limit: $spacer-limit,
  $spacing: $spacer
) {
  @for $i from($limit * $spacing * -1) through ($limit * $spacing) {
    $unit: math.unit($spacer);
    $i: strip-unit($i);
    $spacing: strip-unit($spacing);
    @if ($i % 2 == 0) {
      //Get quotient
      $quotient: math.abs(math.div($i, $spacing));

      // Split quotient to detect if it has decimal or not
      $get_value: string.split(#{$quotient}, '.');

      // Default suffix (exmaple: mt-25 or mt-10.5
      $get_suffix: '-';

      $step_map: ();

      @if (list.length($get_value) > 1) {
        $get_suffix: $get_suffix +
          list.nth($get_value, 1) +
          '\\.'+
          list.nth($get_value, -1);
        $step_map: map.set(
          $step_map,
          $i,
          (
            'selector': $get_suffix,
            'prefix': if($i < 0, '-', ''),
            'value': #{$i} + $unit,
          )
        );
      } @else {
        $get_suffix: $get_suffix + list.nth($get_value, 1);
        $step_map: map.set(
          $step_map,
          $i,
          (
            'selector': $get_suffix,
            'prefix': if($i < 0, '-', ''),
            'value': #{$i} + $unit,
          )
        );
      }
      $spacing-range: map.merge($spacing-range, $step_map) !global;
    }
  }
}
@include generate_spacing_range();

@mixin generate_width_range($max_limit: 12) {
  $index: 0;
  @for $i from 2 through $max_limit {
    @for $j from 1 to $i {
      $step_map: ();
      $quotient: generate-width($j, $i);
      $step_map: map.set(
        $step_map,
        $index,
        (
          'selector': '-' + #{$j} + '\\/'+ #{$i},
          'value': $quotient,
        )
      );
      $width-range: map.merge($width-range, $step_map) !global;
      $index: $index + 1;
    }
  }
}
@include generate_width_range();

@mixin generate_container_up($get_key) {
  @media screen and (min-width: map.get($grid-breakpoints, $get_key)) {
    @content;
  }
}

@mixin generate_utilities($responsive_key: '') {
  $prefix: $responsive_key;
  @each $property, $map in $utilities {
    @each $util-key, $util-val in map.get($map, values) {
      @if (map.get($map, isActive) == true) {
        .#{$prefix}#{$util-key} {
          #{map.get($map, property)}: $util-val;
        }
      }
    }
  }
  @for $i from 0 through $number-of-col {
    .#{$prefix}z-#{$i} {
      z-index: $i;
    }
    .#{$prefix}order-#{$i} {
      order: $i;
    }
  }
}

@mixin generate_margin($responsive_key: '') {
  //.mt-10 or .-mb-10\.5
  $class_prefix: 'm';
  $class_property: 'margin';
  $responsive_key: if(
    $responsive_key != '',
    '.#{$responsive-key}',
    '.'
  );
  @each $key, $space_map in $spacing-range {
    $selector: map.get($space_map, 'selector');
    $prefix: map.get($space_map, 'prefix');
    $value: map.get($space_map, 'value');

    // To generate -> .m-20{margin: 80px}
    #{$responsive_key + $prefix + $class_prefix + $selector} {
      #{$class_property}: #{$value};
    }

    // Generate classes with directions
    @each $direction_key, $direction_val in $space-directions {
      #{$responsive_key
        + $prefix
        + $class_prefix
        + $direction_key
        + $selector} {
        @if (meta.type-of($direction_val) == list) {
          @each $direction in $direction_val {
            #{$class_property + '-' + $direction}: #{$value};
          }
        } @else {
          #{$class_property + '-' + $direction_val}: #{$value};
        }
      }

      // Generate margin auto values
      @if ($key == 0) {
        #{$responsive_key
          + $prefix
          + $class_prefix
          + $direction_key
          + '-auto'} {
          @if (meta.type-of($direction_val) == list) {
            @each $direction in $direction_val {
              #{$class_property + '-' + $direction}: auto;
            }
          } @else {
            #{$class_property + '-' + $direction_val}: auto;
          }
        }
      }
    }
  }
}

@mixin generate_padding($responsive_key: '') {
  $class_prefix: 'p';
  $class_property: 'padding';
  $responsive_key: if(
    $responsive_key != '',
    '.#{$responsive-key}',
    '.'
  );
  @each $key, $space_map in $spacing-range {
    @if ($key >= 0) {
      $selector: map.get($space_map, 'selector');
      $prefix: map.get($space_map, 'prefix');
      $value: map.get($space_map, 'value');

      // To generate -> .m-20{margin: 80px}
      #{$responsive_key + $prefix + $class_prefix + $selector} {
        #{$class_property}: #{$value};
      }

      // Generate classes with directions
      @each $direction_key, $direction_val in $space-directions {
        #{$responsive_key
          + $prefix
          + $class_prefix
          + $direction_key
          + $selector} {
          @if (meta.type-of($direction_val) == list) {
            @each $direction in $direction_val {
              #{$class_property + '-' + $direction}: #{$value};
            }
          } @else {
            #{$class_property + '-' + $direction_val}: #{$value};
          }
        }
      }
    }
  }
}

@mixin generate_gap($responsive_key: ''){
  $class_prefix: 'gap';
  $responsive_key: if(
    $responsive_key != '',
    '.#{$responsive-key}',
    '.'
  );
  @each $key, $space_map in $spacing-range {
    @if ($key >= 0) {
      $selector: map.get($space_map, 'selector');
      $prefix: map.get($space_map, 'prefix');
      $value: map.get($space_map, 'value');

      // To generate -> .m-20{margin: 80px}
      #{$responsive_key + $prefix + $class_prefix + $selector} {
        gap: #{$value};
      }

      // Generate classes with directions
      @each $direction_key, $direction_val in $gap-directions {
        #{$responsive_key
          + $prefix
          + $class_prefix
          + '-'
          + $direction_key
          + $selector} {
          @if (meta.type-of($direction_val) == list) {
            @each $direction in $direction_val {
              #{$direction_val}: #{$value};
            }
          } @else {
            #{$direction_val}: #{$value};
          }
        }
      }
    }
  }
}

@mixin generate_position($responsive_key: '') {
  $responsive_key: if(
    $responsive_key != '',
    '.#{$responsive-key}',
    '.'
  );

  @each $position_key, $position-val in $position-directions {
    @each $key, $space_map in $spacing-range {
      $selector: map.get($space_map, 'selector');
      $prefix: map.get($space_map, 'prefix');
      $value: map.get($space_map, 'value');

      #{$responsive_key + $prefix + $position_key + $selector} {
        #{$position_val}: #{$value};
      }
    }
    @each $index, $width_map in $width-range{
      $css_value: map.get($width_map, 'value');
      $selector: map.get($width_map, 'selector');

      #{$responsive_key + $position_key + $selector}{
        #{$position_val}: #{$css_value};
      }
    }
  }
}

@mixin generate_width_height($responsive_key: '', $upper_limit: $spacer_limit, $spacing: $spacer){
  $responsive_key: if(
    $responsive_key != '',
    '.#{$responsive-key}',
    '.'
  );
  @each $key, $value in ('w': 'width', 'h': 'height'){
    @for $i from 0 through ($upper_limit * $spacing) {
      $unit: math.unit($spacer);
      $i: strip-unit($i);
      $spacing: strip-unit($spacing);
      @if ($i % $spacing == 0){
        #{$responsive_key + $key + '-' + #{math.div($i, $spacing)}}{
          #{$value}: #{$i}#{$unit};
        }
      }
    }

    @each $index, $width_map in $width-range{
      $css_value: map.get($width_map, 'value');
      $selector: map.get($width_map, 'selector');
      #{$responsive_key + $key + $selector}{
        #{$value}: #{$css_value};
      }
    }

    #{$responsive_key + $key + '-full'}{
      #{$value}: 100%
    }

    #{$responsive_key + $key + '-auto'}{
      #{$value}: auto;
    }

    #{$responsive_key + $key + '-screen'}{
      #{$value}: #{if($key == 'w', '100vw', '100vh')}
    }

  }
}

@mixin generate_cols($responsive_key: '') {
  $prefix: if($responsive_key != '', '#{$responsive_key}-', $responsive_key);
  @for $i from 0 through $number-of-col {
    @if ($i != 0){
      .col-#{$prefix}#{$i} {
        width: generate-width($i, $number-of-col);
      }
    }
    @if $i != $number-of-col {
      .offset-#{$prefix}#{$i} {
        #{if($has-rtl, 'margin-block-start', 'margin-left')}: generate-width($i, $number-of-col);
      }
    }
  }
}

@mixin generate_opacity($responsive_key: '') {
  $prefix: if($responsive_key != '', '#{$responsive_key}\\:', $responsive_key);
  @for $i from 0 through 100 {
    @if $i % 5 == 0 {
      .#{$responsive_key}opacity-#{$i} {
        opacity: math.div($i, 100);
      }
    }
  }
}


$mixin_list: (
  'generate_utilities',
  'generate_opacity',
  'generate_margin',
  'generate_padding',
  'generate_position',
  'generate_width_height',
  'generate_gap'
);

@mixin generate_mixins($responsive_key: false) {
  @each $element in $mixin_list {
    @include meta.apply(meta.get-mixin($element), if($responsive_key, #{$responsive_key + '\\:'}, ''));
  }
}